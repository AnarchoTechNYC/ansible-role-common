# Tasks to build a hardened Linux kernel on a Raspberry Pi device.
#
# This automates the procedure described in the RPi documentation:
# https://www.raspberrypi.com/documentation/computers/linux_kernel.html
---
- name: Ensure kernel build dependencies are present.
  package:
    name: "{{ item }}"
    state: present
  loop:
    - git
    - bc
    - python3-pexpect # For kernel configuration questions.
    - bison
    - flex
    - libssl-dev
    - make

- name: Ensure local source directory exists.
  file:
    path: /usr/local/src/rpi-kernel
    state: directory
    owner: root
    group: root
    mode: "700"

- name: Clone Linux source code.
  git:
    repo: https://github.com/raspberrypi/linux.git
    dest: /usr/local/src/rpi-kernel/linux
    depth: 1

# The `make` command depends on the model of RPi.
# See:
# https://www.raspberrypi.com/documentation/computers/linux_kernel.html#default_configuration
- name: Make ARMv8-A chipset kernel configuration.
  when: ansible_architecture | default(ansible_machine) | default('aarch64') == 'aarch64'
  command: "make bcm2711_defconfig"
  args:
    chdir: /usr/local/src/rpi-kernel/linux

- name: Make ARMv7 chipset kernel configuration.
  when: ansible_architecture | default(ansible_machine) | default('armv7l') == 'armv7l'
  command: "make bcm2709_defconfig"
  args:
    chdir: /usr/local/src/rpi-kernel/linux

- name: Make ARMv6 chipset kernel configuration.
  when: ansible_architecture | default(ansible_machine) | default('armv6l') == 'armv6l'
  command: "make bcmrpi_defconfig"
  args:
    chdir: /usr/local/src/rpi-kernel/linux

# TODO: Move kernel configuration commands to its own Ansible role.
- name: Configure kernel with AppArmor support.
  lineinfile:
    path: /usr/local/src/rpi-kernel/linux/.config
    regexp: '^#?\s*{{ item.param }}(?: is not set|=)'
    line: "{{ item.param }}={{ item.value | default('y') }}"
    state: "{{ item.state | default('present') }}"
  loop:
    - param: CONFIG_SECURITY
      value: y
      state: present
    - param: CONFIG_SECURITYFS
      value: y
      state: present
    - param: CONFIG_SECURITY_NETWORK
      value: y
      state: present
    - param: CONFIG_SECURITY_PATH
      value: y
      state: present
    - param: CONFIG_SECURITY_APPARMOR
      value: y
      state: present
    - param: CONFIG_SECURITY_APPARMOR_HASH
      value: y
      state: present
    - param: CONFIG_SECURITY_APPARMOR_HASH_DEFAULT
      value: y
      state: present
    - param: CONFIG_SECURITY_APPARMOR_BOOTPARAM_VALUE
      value: 1
      state: present
    - param: CONFIG_INTEGRITY
      value: y
      state: present
    - param: CONFIG_INTEGRITY_AUDIT
      value: y
      state: present
    - param: CONFIG_DEFAULT_SECURITY_APPARMOR
      value: y
      state: present
    - param: CONFIG_DEFAULT_SECURITY
      value: '"apparmor"'
      state: present
    - param: CONFIG_AUDIT
      value: y
      state: present
    - param: CONFIG_AUDITSYSCALL
      value: y
      state: present
    - param: CONFIG_AUDIT_WATCH
      value: y
      state: present
    - param: CONFIG_AUDIT_TREE
      value: y
      state: present
    - param: CONFIG_CRYPTO_SHA1
      value: y
      state: present
    - param: CONFIG_AUDIT_GENERIC
      value: y
      state: present

    # Configuration options to remove/unset.
    - param: CONFIG_DEFAULT_SECURITY_DAC
      state: absent

- name: Recompile kernel.
  expect:
    chdir: /usr/local/src/rpi-kernel/linux
    command: "make -j {{ ansible_processor_count | default(1) // 2 }} {% if 'aarch64' == ansible_machine %}Image.gz{% else %}zImage{% endif %} modules dtbs"
    creates: "/usr/local/src/rpi-kernel/linux/arch/arm{% if 'aarch64' == ansible_machine %}64{% endif %}/boot/{% if 'aarch64' == ansible_machine %}Image.gz{% else %}zImage{% endif %}"
    timeout: null
    responses:
      'N/y/?': N
      'N/m/?': N
      'choice\[1-': '' # Choose default.

- name: Install kernel modules.
  command: "make modules_install"
  args:
    chdir: /usr/local/src/rpi-kernel/linux
  notify: Reboot.

- name: Install RPi Linux kernel.
  command: "cp arch/arm{% if 'aarch64' == ansible_machine %}64{% endif %}/boot/{% if 'aarch64' == ansible_machine %}Image.gz{% else %}zImage{% endif %} /boot/kernel{% if ansible_architecture | default(ansible_machine) | default('armv7l') == 'armv7l' %}7{% elif 'aarch64' == ansible_machine %}8{% endif %}.img"
  args:
    chdir: /usr/local/src/rpi-kernel/linux
  notify: Reboot.

- name: Install RPi device tree blobs.
  shell: "cp arch/arm{% if 'aarch64' == ansible_machine %}64{% endif %}/boot/dts/{% if 'aarch64' == ansible_machine %}broadcom/{% endif %}*.dtb /boot/"
  args:
    chdir: /usr/local/src/rpi-kernel/linux
  notify: Reboot.

- name: Install RPi device tree blob overlays.
  shell: "cp arch/arm{% if 'aarch64' == ansible_machine %}64{% endif %}/boot/dts/overlays/*.dtb* /boot/overlays/"
  args:
    chdir: /usr/local/src/rpi-kernel/linux
  notify: Reboot.

- name: Install RPi device tree blob overlays README file.
  shell: "cp arch/arm{% if 'aarch64' == ansible_machine %}64{% endif %}/boot/dts/overlays/README /boot/overlays/"
  args:
    chdir: /usr/local/src/rpi-kernel/linux

- name: Reclaim disk space from kernel build process.
  file:
    path: /usr/local/src/rpi-kernel
    state: absent

- name: Hold updates for stock RPi kernel and bootloader.
  register: apt_mark
  command: "apt-mark hold {{ item }}"
  changed_when: "'was already set on hold' not in apt_mark.stdout"
  loop:
    - raspberrypi-kernel
    - raspberrypi-bootloader
